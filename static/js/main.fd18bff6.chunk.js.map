{"version":3,"sources":["types.ts","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoFilter","props","titlePhrase","handleChange","todoStatus","selectStatus","className","type","value","placeholder","onChange","event","target","name","Default","disabled","All","Active","Completed","TodoList","state","setState","status","getTodoStatus","completed","getFilteredTodos","todos","filter","todo","title","includes","this","selectUser","visibleTodos","map","id","userId","classNames","readOnly","checked","onClick","React","Component","getData","url","fetch","then","response","ok","Error","json","loadTodos","loadUserData","CurrentUser","email","phone","error","a","userData","prevProps","clearSelectedUser","App","selectedUserId","loadData","ReactDOM","render","document","getElementById"],"mappings":"qQAAYA,E,wIAAAA,K,kBAAAA,E,UAAAA,E,sBAAAA,E,iBAAAA,M,sBCWCC,EAA8B,SAACC,GAC1C,IACEC,EAIED,EAJFC,YACAC,EAGEF,EAHFE,aACAC,EAEEH,EAFFG,WACAC,EACEJ,EADFI,aAGF,OACE,sBAAKC,UAAU,eAAf,UACE,uBACEC,KAAK,OACLD,UAAU,sBACVE,MAAON,EACPO,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAWR,EAAaQ,EAAMC,OAAOJ,UAGjD,yBACEK,KAAK,eACLL,MAAOJ,EACPM,SAAU,SAACC,GAAD,OACRN,EAAaM,EAAMC,OAAOJ,QAJ9B,UAOE,wBAAQA,MAAOT,EAAWe,QAASC,UAAQ,EAA3C,gCAGA,wBAAQP,MAAOT,EAAWiB,IAA1B,iBAGA,wBAAQR,MAAOT,EAAWkB,OAA1B,oBAGA,wBAAQT,MAAOT,EAAWmB,UAA1B,8BC5BKC,EAAb,4MACEC,MAAe,CACblB,YAAa,GACbE,WAAYL,EAAWe,SAH3B,EAMEX,aAAe,SAACK,GACd,EAAKa,SAAS,CACZnB,YAAaM,KARnB,EAYEH,aAAe,SAACiB,GACd,EAAKD,SAAS,CACZjB,WAAYkB,KAdlB,EAkBEC,cAAgB,SAACC,GAGf,OAFuB,EAAKJ,MAApBhB,YAGN,KAAKL,EAAWkB,OACd,OAAQO,EACV,KAAKzB,EAAWmB,UACd,OAAOM,EACT,QACE,OAAO,IA3Bf,EA+BEC,iBAAmB,SAACC,GAClB,IAAQxB,EAAgB,EAAKkB,MAArBlB,YAER,OAAOwB,EAAMC,QACX,SAAAC,GACE,IAAQC,EAAqBD,EAArBC,MAAOL,EAAcI,EAAdJ,UAEf,OAAOK,GAASA,EAAMC,SAAS5B,IAAgB,EAAKqB,cAAcC,OAtC1E,4CA2CE,WACE,MAA8BO,KAAK9B,MAA3ByB,EAAR,EAAQA,MAAOM,EAAf,EAAeA,WACf,EAAoCD,KAAKX,MAAjClB,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,WACf6B,EAAeF,KAAKN,iBAAiBC,GAE3C,OACE,sBAAKpB,UAAU,WAAf,UACE,wCACA,cAAC,EAAD,CACEJ,YAAaA,EACbC,aAAc4B,KAAK5B,aACnBC,WAAYA,EACZC,aAAc0B,KAAK1B,eAGrB,qBAAKC,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACG2B,EAAaC,KAAI,SAAAN,GAChB,IACEO,EACEP,EADFO,GAAIN,EACFD,EADEC,MAAOL,EACTI,EADSJ,UAAWY,EACpBR,EADoBQ,OAGxB,OACE,qBAEE9B,UAAW+B,IACT,iBACA,CAAE,0BAA2Bb,GAC7B,CAAE,6BAA8BA,IALpC,UAQE,kCACE,uBAAOjB,KAAK,WAAW+B,UAAQ,EAACC,QAASf,IACzC,4BAAIK,OAGN,wBACEvB,UAAW+B,IACT,wBACA,CAAE,kCAAmCb,GACrC,UAEFjB,KAAK,SACLiC,QAAS,kBAAMR,EAAWI,IAP5B,uBASUA,OArBLD,iBAnEvB,GAA8BM,IAAMC,W,QCf9BC,G,MAAU,SAACC,GACf,OAAOC,MAAM,GAAD,OAHG,sCAGH,OAAeD,IACxBE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,2BAGlB,OAAOF,EAASG,YAITC,EAAY,WACvB,OAAOR,EAAQ,UAGJS,EAAe,SAAChB,GAC3B,OAAOO,EAAQ,SAAD,OAAUP,KCLbiB,EAAb,4MACEjC,MAAe,CACbe,GAAI,EACJtB,KAAM,GACNyC,MAAO,GACPC,MAAO,GACPC,OAAO,GANX,EAmBEJ,aAnBF,sBAmBiB,4BAAAK,EAAA,+EAEYL,EAAa,EAAKnD,MAAMmC,QAFpC,OAELsB,EAFK,OAIX,EAAKrC,SAAL,2BACKqC,GADL,IAEEF,OAAO,KANE,gDASX,EAAKnC,SAAS,CACZmC,OAAO,IAVE,yDAnBjB,uDASE,WACEzB,KAAKqB,iBAVT,gCAaE,SAAmBO,GACbA,EAAUvB,SAAWL,KAAK9B,MAAMmC,QAClCL,KAAKqB,iBAfX,oBAkCE,WACE,MAEIrB,KAAKX,MADPe,EADF,EACEA,GAAItB,EADN,EACMA,KAAMyC,EADZ,EACYA,MAAOC,EADnB,EACmBA,MAGnB,OAJA,EAC0BC,MAKtB,6DAEA,sBAAKlD,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyB6B,OAG3B,oBAAI7B,UAAU,oBAAd,SAAmCO,IACnC,mBAAGP,UAAU,qBAAb,SAAmCgD,IACnC,mBAAGhD,UAAU,qBAAb,SAAmCiD,IACnC,wBACEjD,UAAU,SACVC,KAAK,SACLiC,QAAST,KAAK9B,MAAM2D,kBAHtB,0BAnDV,GAAiCnB,IAAMC,WCEjCmB,E,4MACJzC,MAAe,CACb0C,eAAgB,EAChBpC,MAAO,GACP8B,OAAO,G,EAOTO,S,sBAAW,4BAAAN,EAAA,+EAEaN,IAFb,OAEDzB,EAFC,OAIP,EAAKL,SAAS,CACZK,QACA8B,OAAO,IANF,gDASP,EAAKnC,SAAS,CACZmC,OAAO,IAVF,yD,EAeXxB,WAAa,SAACI,GACZ,EAAKf,SAAS,CACZyC,eAAgB1B,K,EAIpBwB,kBAAoB,WAClB,EAAKvC,SAAS,CACZyC,eAAgB,K,uDA3BpB,WACE/B,KAAKgC,a,oBA8BP,WACE,MAAyChC,KAAKX,MAAtC0C,EAAR,EAAQA,eAAgBpC,EAAxB,EAAwBA,MAExB,OAFA,EAA+B8B,MAI3B,6DAEA,sBAAKlD,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEoB,MAAOA,EACPM,WAAYD,KAAKC,eAIrB,qBAAK1B,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGwD,EACC,cAAC,EAAD,CACE1B,OAAQ0B,EACRF,kBAAmB7B,KAAK6B,oBAExB,8B,GA5DAnB,IAAMC,WAqETmB,ICjFfG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fd18bff6.chunk.js","sourcesContent":["export enum TodoStatus {\n  Default = 'default',\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport { TodoStatus } from '../../types';\nimport './TodoFilter.scss';\n\ninterface Props {\n  titlePhrase: string;\n  handleChange: (value: string) => void;\n  todoStatus: TodoStatus;\n  selectStatus: (status: TodoStatus) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = (props) => {\n  const {\n    titlePhrase,\n    handleChange,\n    todoStatus,\n    selectStatus,\n  } = props;\n\n  return (\n    <div className=\"filter-block\">\n      <input\n        type=\"text\"\n        className=\"filter-block__input\"\n        value={titlePhrase}\n        placeholder=\"Search by title\"\n        onChange={(event) => handleChange(event.target.value)}\n      />\n\n      <select\n        name=\"progressTodo\"\n        value={todoStatus}\n        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => (\n          selectStatus(event.target.value as TodoStatus)\n        )}\n      >\n        <option value={TodoStatus.Default} disabled>\n          Choose todo status\n        </option>\n        <option value={TodoStatus.All}>\n          All\n        </option>\n        <option value={TodoStatus.Active}>\n          Active\n        </option>\n        <option value={TodoStatus.Completed}>\n          Completed\n        </option>\n      </select>\n    </div>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { TodoStatus } from '../../types';\n\nimport { TodoFilter } from '../TodoFilter';\n\ninterface Props {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n}\n\ninterface State {\n  titlePhrase: string;\n  todoStatus: TodoStatus;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    titlePhrase: '',\n    todoStatus: TodoStatus.Default,\n  };\n\n  handleChange = (value: string) => {\n    this.setState({\n      titlePhrase: value,\n    });\n  };\n\n  selectStatus = (status: TodoStatus) => {\n    this.setState({\n      todoStatus: status,\n    });\n  };\n\n  getTodoStatus = (completed: boolean) => {\n    const { todoStatus } = this.state;\n\n    switch (todoStatus) {\n      case TodoStatus.Active:\n        return !completed;\n      case TodoStatus.Completed:\n        return completed;\n      default:\n        return true;\n    }\n  };\n\n  getFilteredTodos = (todos: Todo[]) => {\n    const { titlePhrase } = this.state;\n\n    return todos.filter(\n      todo => {\n        const { title, completed } = todo;\n\n        return title && title.includes(titlePhrase) && this.getTodoStatus(completed);\n      },\n    );\n  };\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { titlePhrase, todoStatus } = this.state;\n    const visibleTodos = this.getFilteredTodos(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <TodoFilter\n          titlePhrase={titlePhrase}\n          handleChange={this.handleChange}\n          todoStatus={todoStatus}\n          selectStatus={this.selectStatus}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => {\n              const {\n                id, title, completed, userId,\n              } = todo;\n\n              return (\n                <li\n                  key={id}\n                  className={classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--checked': completed },\n                    { 'TodoList__item--unchecked': !completed },\n                  )}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly checked={completed} />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      { 'TodoList__user-button--selected': completed },\n                      'button',\n                    )}\n                    type=\"button\"\n                    onClick={() => selectUser(userId)}\n                  >\n                    {`User${userId}`}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Something went wrong :(');\n      }\n\n      return response.json();\n    });\n};\n\nexport const loadTodos = () => {\n  return getData('todos');\n};\n\nexport const loadUserData = (userId: number):Promise<User> => {\n  return getData(`users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUserData } from '../../api';\n\ninterface Props {\n  userId: number;\n  clearSelectedUser: () => void;\n}\n\ntype State = User & {\n  error: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n    error: false,\n  };\n\n  componentDidMount() {\n    this.loadUserData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserData();\n    }\n  }\n\n  loadUserData = async () => {\n    try {\n      const userData = await loadUserData(this.props.userId);\n\n      this.setState({\n        ...userData,\n        error: false,\n      });\n    } catch {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  render() {\n    const {\n      id, name, email, phone, error,\n    } = this.state;\n\n    return (\n      error ? (\n        <h2>Ups... Something went wrong</h2>\n      ) : (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.props.clearSelectedUser}\n          >\n            Clear\n          </button>\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  error: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    error: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData = async () => {\n    try {\n      const todos = await loadTodos();\n\n      this.setState({\n        todos,\n        error: false,\n      });\n    } catch {\n      this.setState({\n        error: true,\n      });\n    }\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos, error } = this.state;\n\n    return (\n      error ? (\n        <h2>Ups... Something went wrong</h2>\n      ) : (\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={this.selectUser}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearSelectedUser={this.clearSelectedUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}